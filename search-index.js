var searchIndex = JSON.parse('{\
"byteorder":{"doc":"This crate provides convenience methods for encoding and …","t":[8,10,11,10,11,10,10,10,10,10,11,10,11,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,10,10,4,6,4,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ByteOrder","read_u16","read_u24","read_u32","read_u48","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u24","write_u32","write_u48","write_u64","write_u128","write_uint","write_uint128","read_i16","read_i24","read_i32","read_i48","read_i64","read_i128","read_int","read_int128","read_f32","read_f64","write_i16","write_i24","write_i32","write_i48","write_i64","write_i128","write_int","write_int128","write_f32","write_f64","read_u16_into","read_u32_into","read_u64_into","read_u128_into","read_i16_into","read_i32_into","read_i64_into","read_i128_into","read_f32_into","read_f32_into_unchecked","read_f64_into","read_f64_into_unchecked","write_u16_into","write_u32_into","write_u64_into","write_u128_into","write_i8_into","write_i16_into","write_i32_into","write_i64_into","write_i128_into","write_f32_into","write_f64_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_i16","from_slice_i32","from_slice_i64","from_slice_i128","from_slice_f32","from_slice_f64","BigEndian","BE","LittleEndian","LE","NetworkEndian","NativeEndian","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","read_u16","read_u32","read_u64","read_u128","read_uint","read_uint128","write_u16","write_u32","write_u64","write_u128","write_uint","write_uint128","read_u16_into","read_u32_into","read_u64_into","read_u128_into","write_u16_into","write_u32_into","write_u64_into","write_u128_into","from_slice_u16","from_slice_u32","from_slice_u64","from_slice_u128","from_slice_f32","from_slice_f64","fmt","fmt","eq","eq","cmp","cmp","partial_cmp","partial_cmp","hash","hash","clone","clone","default","default"],"q":["byteorder","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["<code>ByteOrder</code> describes types that can serialize integers as …","Reads an unsigned 16 bit integer from <code>buf</code>.","Reads an unsigned 24 bit integer from <code>buf</code>, stored in u32.","Reads an unsigned 32 bit integer from <code>buf</code>.","Reads an unsigned 48 bit integer from <code>buf</code>, stored in u64.","Reads an unsigned 64 bit integer from <code>buf</code>.","Reads an unsigned 128 bit integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Reads an unsigned n-bytes integer from <code>buf</code>.","Writes an unsigned 16 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 24 bit integer <code>n</code> to <code>buf</code>, stored in u32.","Writes an unsigned 32 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 48 bit integer <code>n</code> to <code>buf</code>, stored in u64.","Writes an unsigned 64 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned 128 bit integer <code>n</code> to <code>buf</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes an unsigned integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Reads a signed 16 bit integer from <code>buf</code>.","Reads a signed 24 bit integer from <code>buf</code>, stored in i32.","Reads a signed 32 bit integer from <code>buf</code>.","Reads a signed 48 bit integer from <code>buf</code>, stored in i64.","Reads a signed 64 bit integer from <code>buf</code>.","Reads a signed 128 bit integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a signed n-bytes integer from <code>buf</code>.","Reads a IEEE754 single-precision (4 bytes) floating point …","Reads a IEEE754 double-precision (8 bytes) floating point …","Writes a signed 16 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 24 bit integer <code>n</code> to <code>buf</code>, stored in i32.","Writes a signed 32 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 48 bit integer <code>n</code> to <code>buf</code>, stored in i64.","Writes a signed 64 bit integer <code>n</code> to <code>buf</code>.","Writes a signed 128 bit integer <code>n</code> to <code>buf</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a signed integer <code>n</code> to <code>buf</code> using only <code>nbytes</code>.","Writes a IEEE754 single-precision (4 bytes) floating …","Writes a IEEE754 double-precision (8 bytes) floating …","Reads unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Reads unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 16 bit integers from <code>src</code> to <code>dst</code>.","Reads signed 32 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 64 bit integers from <code>src</code> into <code>dst</code>.","Reads signed 128 bit integers from <code>src</code> into <code>dst</code>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Reads IEEE754 single-precision (4 bytes) floating point …","<strong>DEPRECATED</strong>.","Writes unsigned 16 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 32 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 64 bit integers from <code>src</code> into <code>dst</code>.","Writes unsigned 128 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 8 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 16 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 32 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 64 bit integers from <code>src</code> into <code>dst</code>.","Writes signed 128 bit integers from <code>src</code> into <code>dst</code>.","Writes IEEE754 single-precision (4 bytes) floating point …","Writes IEEE754 double-precision (8 bytes) floating point …","Converts the given slice of unsigned 16 bit integers to a …","Converts the given slice of unsigned 32 bit integers to a …","Converts the given slice of unsigned 64 bit integers to a …","Converts the given slice of unsigned 128 bit integers to …","Converts the given slice of signed 16 bit integers to a …","Converts the given slice of signed 32 bit integers to a …","Converts the given slice of signed 64 bit integers to a …","Converts the given slice of signed 128 bit integers to a …","Converts the given slice of IEEE754 single-precision (4 …","Converts the given slice of IEEE754 double-precision (8 …","Defines big-endian serialization.","A type alias for <code>BigEndian</code>.","Defines little-endian serialization.","A type alias for <code>LittleEndian</code>.","Defines network byte order serialization.","Defines system native-endian serialization.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,2,2,2,2,2,2,2,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3],"f":[null,[[],["u16",15]],[[],["u32",15]],[[],["u32",15]],[[],["u64",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[],["i16",15]],[[],["i32",15]],[[],["i32",15]],[[],["i64",15]],[[],["i64",15]],[[],["i128",15]],[[["usize",15]],["i64",15]],[[["usize",15]],["i128",15]],[[],["f32",15]],[[],["f64",15]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i128",15]]],[[["i64",15],["usize",15]]],[[["usize",15],["i128",15]]],[[["f32",15]]],[[["f64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u16",15]],[[],["u32",15]],[[],["u64",15]],[[],["u128",15]],[[["usize",15]],["u64",15]],[[["usize",15]],["u128",15]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["usize",15],["u64",15]]],[[["usize",15],["u128",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["bigendian",4]],["bool",15]],[[["littleendian",4]],["bool",15]],[[["bigendian",4]],["ordering",4]],[[["littleendian",4]],["ordering",4]],[[["bigendian",4]],[["ordering",4],["option",4]]],[[["littleendian",4]],[["ordering",4],["option",4]]],[[]],[[]],[[],["bigendian",4]],[[],["littleendian",4]],[[],["bigendian",4]],[[],["littleendian",4]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]},\
"hash32":{"doc":"32-bit hashing machinery","t":[3,3,3,11,8,16,10,8,10,10,8,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["FnvHasher","Murmur3Hasher","BuildHasherDefault","new","BuildHasher","Hasher","build_hasher","Hasher","finish","write","Hash","hash","hash_slice","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","build_hasher","finish","write","finish","write","fmt","eq","clone","default","default","default"],"q":["hash32","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["32-bit Fowler-Noll-Vo hasher","32-bit MurmurHash3 hasher","See <code>core::hash::BuildHasherDefault</code> for details","<code>const</code> constructor","See <code>core::hash::BuildHasher</code> for details","See <code>core::hash::BuildHasher::Hasher</code>","See <code>core::hash::BuildHasher.build_hasher</code>","See <code>core::hash::Hasher</code> for details","See <code>core::hash::Hasher.finish</code>","See <code>core::hash::Hasher.write</code>","See <code>core::hash::Hash</code> for details","Feeds this value into the given <code>Hasher</code>.","Feeds a slice of this type into the given <code>Hasher</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,2,2,0,3,3,0,4,4,5,5,5,5,5,5,5,6,6,6,6,6,6,6,1,1,1,1,1,1,1,1,5,5,6,6,1,1,1,5,6,1],"f":[null,null,null,[[]],null,null,[[]],null,[[],["u32",15]],[[]],null,[[]],[[]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["u32",15]],[[]],[[],["u32",15]],[[]],[[["formatter",3]],["result",6]],[[["buildhasherdefault",3]],["bool",15]],[[]],[[]],[[]],[[]]],"p":[[3,"BuildHasherDefault"],[8,"BuildHasher"],[8,"Hasher"],[8,"Hash"],[3,"FnvHasher"],[3,"Murmur3Hasher"]]},\
"heapless":{"doc":"<code>static</code> friendly data structures that don’t require …","t":[0,4,4,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,0,6,6,6,6,6,6,3,11,11,11,0,0,8,16,11,11,11,3,11,11,11,3,3,11,11,11,11,11,3,11,4,4,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,3,6,3,6,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["binary_heap","Min","Max","BinaryHeap","new","capacity","clear","len","is_empty","iter","iter_mut","peek","peek_mut","pop","pop_unchecked","push","push_unchecked","PeekMut","pop","mpmc","Q2","Q4","Q8","Q16","Q32","Q64","MpMcQueue","new","dequeue","enqueue","pool","singleton","Pool","Data","alloc","grow","grow_exact","Box","init","freeze","forget","Node","Pool","new","alloc","free","grow","grow_exact","Box","init","Uninit","Init","spsc","Queue","new","capacity","len","is_empty","is_full","iter","iter_mut","enqueue","dequeue","peek","enqueue_unchecked","dequeue_unchecked","split","Iter","IterMut","Consumer","Producer","dequeue","dequeue_unchecked","ready","len","capacity","peek","enqueue","enqueue_unchecked","ready","len","capacity","HistoryBuffer","FnvIndexMap","IndexMap","FnvIndexSet","IndexSet","LinearMap","String","Vec","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","into_iter","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","borrow","borrow_mut","try_from","from","into","try_into","type_id","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","eq","eq","eq","eq","ne","eq","ne","eq","ne","eq","eq","eq","eq","eq","eq","eq","eq","eq","cmp","cmp","partial_cmp","partial_cmp","drop","drop","drop","drop","drop","drop","drop","index","index","index_mut","index_mut","hash","hash","hash","hash","hash","from_str","write_str","write_char","write_str","from_iter","from_iter","from_iter","from_iter","next_back","next_back","next","next","into_iter","extend","extend","extend","extend","extend","extend","extend","extend","from","from","from","from","from","from","from","from","from","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_ref","as_mut","as_mut","as_mut","as_mut","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","default","default","default","hash","hash","hash","new","clear","new_with","clear_with","len","capacity","write","extend_from_slice","recent","as_slice","new","capacity","keys","values","values_mut","iter","iter_mut","len","is_empty","clear","get","contains_key","get_mut","insert","remove","swap_remove","new","capacity","iter","difference","symmetric_difference","intersection","union","len","is_empty","clear","contains","is_disjoint","is_subset","is_superset","insert","remove","new","capacity","clear","contains_key","get","get_mut","len","insert","is_empty","iter","iter_mut","keys","remove","values","values_mut","new","into_bytes","as_str","as_mut_str","as_mut_vec","push_str","capacity","push","truncate","pop","clear","new","from_slice","as_slice","capacity","clear","extend","extend_from_slice","pop","push","push_unchecked","truncate","resize","resize_default","set_len","swap_remove","swap_remove_unchecked","is_full","starts_with","ends_with"],"q":["heapless","heapless::binary_heap","","","","","","","","","","","","","","","","","","heapless","heapless::mpmc","","","","","","","","","","heapless","heapless::pool","heapless::pool::singleton","","","","","","","","","heapless::pool","","","","","","","","","","","heapless","heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::binary_heap","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::mpmc","","","","","","","heapless::pool::singleton","","","","","","","heapless::pool","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless::spsc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","heapless","","","heapless::binary_heap","heapless::pool::singleton","heapless::pool","heapless","","heapless::binary_heap","heapless::pool::singleton","heapless::pool","heapless","","","","","","heapless::binary_heap","heapless::pool::singleton","heapless::pool","heapless::spsc","heapless","heapless::pool::singleton","heapless::pool","heapless","","","","","","","","","","","","","","","heapless::pool::singleton","heapless::pool","heapless::spsc","heapless::pool::singleton","heapless::pool","heapless::pool::singleton","heapless::pool","heapless","","","heapless::binary_heap","","heapless::pool::singleton","heapless::spsc","heapless","","","","","","heapless::pool::singleton","heapless::pool","heapless::spsc","heapless","","","","","","","","heapless::spsc","","","","heapless","","","","","","","","","","","","","","","","","","","","","","","heapless::pool::singleton","heapless::pool","heapless","","heapless::pool::singleton","heapless::pool","heapless","","","","","heapless::binary_heap","heapless::spsc","","heapless","","","","","heapless::binary_heap","heapless","","heapless::spsc","heapless","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["A priority queue implemented with a binary heap.","Min-heap","Max-heap","A priority queue implemented with a binary heap.","Creates an empty BinaryHeap as a $K-heap.","Returns the capacity of the binary heap.","Drops all items from the binary heap.","Returns the length of the binary heap.","Checks if the binary heap is empty.","Returns an iterator visiting all values in the underlying …","Returns a mutable iterator visiting all values in the …","Returns the <em>top</em> (greatest if max-heap, smallest if …","Returns a mutable reference to the greatest item in the …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Removes the <em>top</em> (greatest if max-heap, smallest if …","Pushes an item onto the binary heap.","Pushes an item onto the binary heap without first …","Structure wrapping a mutable reference to the greatest …","Removes the peeked value from the heap and returns it.","A fixed capacity Multiple-Producer Multiple-Consumer …","MPMC queue with a capability for 2 elements.","MPMC queue with a capability for 4 elements.","MPMC queue with a capability for 8 elements.","MPMC queue with a capability for 16 elements.","MPMC queue with a capability for 32 elements.","MPMC queue with a capability for 64 elements.","MPMC queue with a capacity for N elements The max value …","Creates an empty queue","Returns the item in the front of the queue, or <code>None</code> if …","Adds an <code>item</code> to the end of the queue","A heap-less, interrupt-safe, lock-free memory pool (*)","<code>Pool</code> as a global singleton","A global singleton memory pool","The type of data that can be allocated on this pool","Claims a memory block from the pool","Increases the capacity of the pool","Increases the capacity of the pool","A memory block that belongs to the global memory pool, …","Initializes this memory block","Freezes the contents of this memory block","Forgets the contents of this memory block without running …","Unfortunate implementation detail required to use the …","A lock-free memory pool","Creates a new empty pool","Claims a memory block from the pool","Returns a memory block to the pool","Increases the capacity of the pool","Increases the capacity of the pool","A memory block","Initializes this memory block","Uninitialized type state","Initialized type state","Fixed capacity Single Producer Single Consumer (SPSC) …","A statically allocated single producer single consumer …","Creates an empty queue with a fixed capacity of <code>N - 1</code>","Returns the maximum number of elements the queue can hold","Returns the number of elements in the queue","Returns <code>true</code> if the queue is empty","Returns <code>true</code> if the queue is full","Iterates from the front of the queue to the back","Returns an iterator that allows modifying each value","Adds an <code>item</code> to the end of the queue","Returns the item in the front of the queue, or <code>None</code> if …","Returns a reference to the item in the front of the queue …","Adds an <code>item</code> to the end of the queue, without checking if …","Returns the item in the front of the queue, without …","Splits a queue into producer and consumer endpoints","An iterator over the items of a queue","A mutable iterator over the items of a queue","A queue “consumer”; it can dequeue items from the …","A queue “producer”; it can enqueue items into the …","Returns the item in the front of the queue, or <code>None</code> if …","Returns the item in the front of the queue, without …","Returns if there are any items to dequeue. When this …","Returns the number of elements in the queue","Returns the maximum number of elements the queue can hold","Returns the item in the front of the queue without …","Adds an <code>item</code> to the end of the queue, returns back the …","Adds an <code>item</code> to the end of the queue, without checking if …","Returns if there is any space to enqueue a new item. When …","Returns the number of elements in the queue","Returns the maximum number of elements the queue can hold","A “history buffer”, similar to a write-only ring …","A <code>heapless::IndexMap</code> using the default FNV hasher","Fixed capacity <code>IndexMap</code>","A <code>heapless::IndexSet</code> using the default FNV hasher. A list …","Fixed capacity <code>IndexSet</code>.","A fixed capacity map / dictionary that performs lookups …","A fixed capacity <code>String</code>","A fixed capacity <code>Vec</codeonstructs a new history buffer.","Clears the buffer, replacing every element with the …","Constructs a new history buffer, where every element is …","Clears the buffer, replacing every element with the given …","Returns the current fill level of the buffer.","Returns the capacity of the buffer, which is the length …","Writes an element to the buffer, overwriting the oldest …","Clones and writes all elements in a slice to the buffer.","Returns a reference to the most recently written value.","Returns the array slice backing the buffer, without …","Creates an empty <code>IndexMap</code>.","Returns the number of elements the map can hold","Return an iterator over the keys of the map, in their …","Return an iterator over the values of the map, in their …","Return an iterator over mutable references to the the …","Return an iterator over the key-value pairs of the map, …","Return an iterator over the key-value pairs of the map, …","Return the number of key-value pairs in the map.","Returns true if the map contains no elements.","Remove all key-value pairs in the map, while preserving …","Returns a reference to the value corresponding to the key.","Returns true if the map contains a value for the …","Returns a mutable reference to the value corresponding to …","Inserts a key-value pair into the map.","Same as <code>swap_remove</code>","Remove the key-value pair equivalent to <code>key</code> and return …","Creates an empty <code>IndexSet</code>","Returns the number of elements the set can hold","Return an iterator over the values of the set, in their …","Visits the values representing the difference, i.e. the …","Visits the values representing the symmetric difference, …","Visits the values representing the intersection, i.e. the …","Visits the values representing the union, i.e. all the …","Returns the number of elements in the set.","Returns <code>true</code> if the set contains no elements.","Clears the set, removing all values.","Returns <code>true</code> if the set contains a value.","Returns <code>true</code> if <code>self</code> has no elements in common with <code>other</code>…","Returns <code>true</code> if the set is a subset of another, i.e. <code>other</code>…","Examples","Adds a value to the set.","Removes a value from the set. Returns <code>true</code> if the value …","Creates an empty <code>LinearMap</code>","Returns the number of elements that the map can hold","Clears the map, removing all key-value pairs","Returns true if the map contains a value for the …","Returns a reference to the value corresponding to the key","Returns a mutable reference to the value corresponding to …","Returns the number of elements in this map","Inserts a key-value pair into the map.","Returns true if the map contains no elements","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all key-value pairs in arbitrary …","An iterator visiting all keys in arbitrary order","Removes a key from the map, returning the value at the …","An iterator visiting all values in arbitrary order","An iterator visiting all values mutably in arbitrary order","Constructs a new, empty <code>String</code> with a fixed capacity of <code>N</code>","Converts a <code>String</code> into a byte vector.","Extracts a string slice containing the entire string.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Appends a given string slice onto the end of this <code>String</code>.","Returns the maximum number of elements the String can hold","Appends the given <code>char</code> to the end of this <code>String</code>.","Shortens this <code>String</code> to the specified length.","Removes the last character from the string buffer and …","Truncates this <code>String</code>, removing all contents.","Constructs a new, empty vector with a fixed capacity of <code>N</code>","Constructs a new vector with a fixed capacity of <code>N</code> and …","Extracts a slice containing the entire vector.","Returns the maximum number of elements the vector can …","Clears the vector, removing all values.","Extends the vec from an iterator.","Clones and appends all elements in a slice to the <code>Vec</code>.","Removes the last element from a vector and returns it, or …","Appends an <code>item</code> to the back of the collection","Appends an <code>item</code> to the back of the collection","Shortens the vector, keeping the first <code>len</code> elements and …","Resizes the Vec in-place so that len is equal to new_len.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","Returns true if the vec is full","Returns <code>true</code> if <code>needle</code> is a prefix of the Vec.","Returns <code>true</code> if <code>needle</code> is a suffix of the Vec."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,2,0,0,0,0,0,0,0,0,3,3,3,0,0,0,4,4,4,4,0,5,5,5,0,0,6,6,6,6,6,0,7,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0,9,9,9,9,9,9,10,10,10,10,10,0,0,0,0,0,0,0,0,11,11,11,11,11,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,15,15,15,16,16,16,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,1,1,1,1,1,1,1,2,2,2,2,2,2,2,3,3,3,3,3,3,3,5,5,5,5,5,5,5,19,19,19,19,19,19,19,6,6,6,6,6,6,6,7,7,7,7,7,7,7,20,20,20,20,20,20,20,21,21,21,21,21,21,21,8,8,8,8,8,8,8,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,9,9,9,9,9,9,9,10,10,10,10,10,10,10,11,15,16,2,5,7,15,16,2,5,7,11,12,13,14,15,16,1,5,7,8,15,5,7,12,13,14,15,15,15,15,15,15,16,16,16,16,16,16,5,7,8,5,7,5,7,11,14,16,2,1,5,8,12,14,12,14,15,16,5,7,8,15,15,15,16,12,13,14,16,22,23,22,23,16,11,11,12,12,13,13,16,16,15,15,15,15,15,15,15,15,15,11,15,15,16,16,5,7,16,16,5,7,12,13,14,15,16,1,8,22,12,13,14,15,16,1,15,16,8,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16],"f":[null,null,null,null,[[]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["option",4]],[[],[["peekmut",3],["option",4]]],[[],["option",4]],[[]],[[],["result",4]],[[]],null,[[["peekmut",3]]],null,null,null,null,null,null,null,null,[[]],[[],["option",4]],[[],["result",4]],null,null,null,null,[[],[["box",3],["option",4]]],[[],["usize",15]],[[["maybeuninit",19]],["usize",15]],null,[[],[["box",3],["init",4]]],[[],[["box",3],["init",4]]],[[],[["box",3],["uninit",4]]],null,null,[[]],[[],[["box",3],["option",4]]],[[["box",3]]],[[],["usize",15]],[[["maybeuninit",19]],["usize",15]],null,[[],[["box",3],["init",4]]],null,null,null,null,[[]],[[],["usize",15]],[[],["usize",15]],[[],["bool",15]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,null,null,null,[[],["option",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["result",4]],[[]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],null,null,null,null,null,null,null,null,[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["typeid",3]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["indexmap",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["linearmap",3]],["bool",15]],[[["string",3]],["bool",15]],[[["string",3]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["str",15]],["bool",15]],[[["vec",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["box",3]],["bool",15]],[[["box",3]],["bool",15]],[[["queue",3]],["bool",15]],[[["box",3]],["ordering",4]],[[["box",3]],["ordering",4]],[[["box",3]],[["ordering",4],["option",4]]],[[["box",3]],[["ordering",4],["option",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],[["error",3],["result",4]]],[[["char",15]],[["error",3],["result",4]]],[[["str",15]],["result",6]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["i8",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[]],[[],["str",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[],["iter",3]],[[],["itermut",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["option",4]],[[],["bool",15]],[[],["option",4]],[[],[["result",4],["option",4]]],[[],["option",4]],[[],["option",4]],[[]],[[],["usize",15]],[[],["iter",3]],[[["indexset",3]],["difference",3]],[[["indexset",3]]],[[["indexset",3]],["intersection",3]],[[["indexset",3]]],[[],["usize",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[["indexset",3]],["bool",15]],[[],[["bool",15],["result",4]]],[[],["bool",15]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["option",4]],[[],["option",4]],[[],["usize",15]],[[],[["result",4],["option",4]]],[[],["bool",15]],[[],["iter",3]],[[],["itermut",3]],[[]],[[],["option",4]],[[]],[[]],[[]],[[],[["vec",3],["u8",15]]],[[],["str",15]],[[],["str",15]],[[],["vec",3]],[[["str",15]],["result",4]],[[],["usize",15]],[[["char",15]],["result",4]],[[["usize",15]]],[[],[["char",15],["option",4]]],[[]],[[]],[[],["result",4]],[[]],[[],["usize",15]],[[]],[[]],[[],["result",4]],[[],["option",4]],[[],["result",4]],[[]],[[["usize",15]]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]]],"p":[[3,"BinaryHeap"],[3,"PeekMut"],[3,"MpMcQueue"],[8,"Pool"],[3,"Box"],[3,"Pool"],[3,"Box"],[3,"Queue"],[3,"Consumer"],[3,"Producer"],[3,"HistoryBuffer"],[3,"IndexMap"],[3,"IndexSet"],[3,"LinearMap"],[3,"String"],[3,"Vec"],[4,"Min"],[4,"Max"],[3,"Node"],[4,"Uninit"],[4,"Init"],[3,"Iter"],[3,"IterMut"]]},\
"stable_deref_trait":{"doc":"This module defines an unsafe marker trait, StableDeref, …","t":[8,8],"n":["StableDeref","CloneStableDeref"],"q":["stable_deref_trait",""],"d":["An unsafe marker trait for types that deref to a stable …","An unsafe marker trait for types where clones deref to …"],"i":[0,0],"f":[null,null],"p":[]}\
}');
initSearch(searchIndex);